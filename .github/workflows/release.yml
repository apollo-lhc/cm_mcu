name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      dry_run:
        description: "Set to true to skip actual release creation"
        required: false
        default: "false"

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        revision: ["REV1", "REV2", "REV3"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Embedded Arm Toolchain arm-none-eabi-gcc
        uses: carlosperate/arm-none-eabi-gcc-action@v1
        with:
          release: "13.2.Rel1"

      - name: Build for ${{ matrix.revision }}
        run: |
          rev="${{ matrix.revision }}"
          rev_lower=$(echo "$rev" | tr '[:upper:]' '[:lower:]')
          make clean ${{ matrix.revision }}=1
          make -k NO_ECN001=1 ${{ matrix.revision }}=1
          cp projects/cm_mcu/gcc/cm_mcu.bin cm_mcu_noecn001_${rev_lower}.bin
          cp projects/cm_mcu/gcc/cm_mcu.axf cm_mcu_noecn001_${rev_lower}.axf
          make clean ${{ matrix.revision }}=1
          make -k ${{ matrix.revision }}=1
          mkdir -p ${rev_lower}
          cp projects/cm_mcu/gcc/cm_mcu.bin ${rev_lower}/cm_mcu_${rev_lower}.bin
          cp projects/cm_mcu/gcc/cm_mcu.axf ${rev_lower}/cm_mcu_${rev_lower}.axf
          cp projects/boot_loader/gcc/bl_main.bin ${rev_lower}/bl_main_${rev_lower}.bin
          cp projects/boot_loader/gcc/bl_main.axf ${rev_lower}/bl_main_${rev_lower}.axf
          make ${{ matrix.revision }}=1 release
          mv PL_MEM_CM_${rev_lower}.xml ${rev_lower}
          mv CornellCM_MCU.tar.gz ${rev_lower}
          tar zcvpf cm_mcu_${rev_lower}.tar.gz ${rev_lower}
          mv cm_mcu_${rev_lower}.tar.gz ${rev_lower}
      - name: Upload build artifacts for ${{ matrix.revision }}
        uses: actions/upload-artifact@v4
        with:
          name: cm_mcu-${{ matrix.revision }}
          path: ${rev_lower}
  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Test
        run: |
          pwd
          ls -R artifacts/
          find artifacts/ -type f -name '*.axf' -print

      - name: Dry run release (simulation)
        if: ${{ inputs.dry_run == 'true' }}
        run: |
          echo "Dry run enabled. The following artifacts would be released:"
          find artifacts/ -type f -print

      - name: Create GitHub Release
        if: ${{ inputs.dry_run != 'true' }}
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false
          files: |
            artifacts/**
            *.tar.gz
